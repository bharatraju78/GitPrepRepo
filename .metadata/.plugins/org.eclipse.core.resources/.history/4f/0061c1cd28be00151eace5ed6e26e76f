package com.isobar.runkeeper.healthgraph;

import java.io.IOException;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.joda.time.LocalDate;

import com.fitbit.api.FitbitAPIException;
import com.fitbit.api.client.FitbitAPIEntityCache;
import com.fitbit.api.client.FitbitApiClientAgent;
import com.fitbit.api.client.FitbitApiCredentialsCache;
import com.fitbit.api.client.FitbitApiCredentialsCacheMapImpl;
import com.fitbit.api.client.FitbitApiEntityCacheMapImpl;
import com.fitbit.api.client.FitbitApiSubscriptionStorage;
import com.fitbit.api.client.FitbitApiSubscriptionStorageInMemoryImpl;
import com.fitbit.api.client.LocalUserDetail;
import com.fitbit.api.client.service.FitbitAPIClientService;
import com.fitbit.api.common.model.achievement.Achievements;
import com.fitbit.api.common.model.achievement.BestAchievements;
import com.fitbit.api.common.model.activities.Activities;
import com.fitbit.api.common.model.activities.ActivityLog;
import com.fitbit.api.common.model.user.UserInfo;
import com.fitbit.api.model.APIResourceCredentials;
import com.fitbit.api.model.FitbitUser;

public class RegisterFitbitUser extends HttpServlet {
	/**
	 * 
	 */

	private static final long serialVersionUID = -6131757990185342307L;

	private String apiBaseUrl = "api.fitbit.com";
	private String fitbitSiteBaseUrl = "http://www.fitbit.com";
	private String exampleBaseUrl = "http://localhost:8080/MyHealthApp";
	private String clientConsumerKey = "eaef8ac152949cff1f21194ead32a73f";
	private String clientSecret = "ea9695417d2675e2904494af72f84390";

	public static final String OAUTH_TOKEN = "oauth_token";
	public static final String OAUTH_VERIFIER = "oauth_verifier";

	private FitbitAPIEntityCache entityCache = new FitbitApiEntityCacheMapImpl();
	private FitbitApiCredentialsCache credentialsCache = new FitbitApiCredentialsCacheMapImpl();
	private FitbitApiSubscriptionStorage subscriptionStore = new FitbitApiSubscriptionStorageInMemoryImpl();
	

	public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		try {

			FitbitAPIClientService<FitbitApiClientAgent> client = new FitbitAPIClientService<FitbitApiClientAgent>(
					new FitbitApiClientAgent(apiBaseUrl, fitbitSiteBaseUrl, credentialsCache), clientConsumerKey,
					clientSecret, credentialsCache, entityCache, subscriptionStore);

			System.out.println("request.getParameter('completeAuthorization')" + request.getParameter("completeAuthorization"));
			if (request.getParameter("completeAuthorization") != null) {
				String oauth_token = request.getParameter(OAUTH_TOKEN);
				String oauth_verifier = request.getParameter(OAUTH_VERIFIER);
				System.out.println("tempTokenReceived " + oauth_token);
				System.out.println("tempTokenVerifier " + oauth_verifier);
				APIResourceCredentials resourceCredentials = client.getResourceCredentialsByTempToken(oauth_token);

				if (resourceCredentials == null) {
					throw new ServletException("Unrecognized temporary token when attempting to complete authorization: " + oauth_token);
				}
				// Get token credentials only if necessary:
				LocalUserDetail localUserDetail = null;
				FitbitApiClientAgent agent = null;
				String userId = null;
				String token = null;
				String tokenSecret = null;
				if (!resourceCredentials.isAuthorized()) {
					// The verifier is required in the request to get token credentials: 
					resourceCredentials.setTempTokenVerifier(oauth_verifier);
					System.out.println(resourceCredentials.getLocalUserId());
					try {
						client.getTokenCredentials(new LocalUserDetail(resourceCredentials.getLocalUserId()));

						// Get token credentials for user:

						userId = resourceCredentials.getLocalUserId();
						token = resourceCredentials.getAccessToken();
						tokenSecret = resourceCredentials.getAccessTokenSecret();

						System.out.println("UserId=" + userId);
						System.out.println("Token=" + token);
						System.out.println("TokenSecret=" + tokenSecret);

					} catch (FitbitAPIException e) {
						e.printStackTrace();
						throw new ServletException("Unable to finish authorization with Fitbit.", e);
					}
				}
				

				try {

					localUserDetail = new LocalUserDetail(resourceCredentials.getLocalUserId());
					
					resourceCredentials = new APIResourceCredentials(userId, token, tokenSecret);
				    resourceCredentials.setAccessToken(token);
				    resourceCredentials.setAccessTokenSecret(tokenSecret);
				    client.saveResourceCredentials(localUserDetail, resourceCredentials);
				    
				    
				    agent = client.getClient();
				    
				    agent.getCredentialsCache().saveResourceCredentials(localUserDetail, resourceCredentials);
				    

					UserInfo userInfo = agent.getUserInfo(localUserDetail);
					request.setAttribute("userInfo", userInfo);

//					Activities activities = agent.getActivities(localUserDetail, new FitbitUser("227F9J"),
//							new LocalDate());
//					List<ActivityLog> activityLogs = activities.getActivities();
//					for (ActivityLog activityLog : activityLogs) {
//						System.out.println(activityLog.getCalories() + activityLog.getDuration()
//								+ activityLog.getSteps() + activityLog.getDistance());
//					}

					request.getRequestDispatcher("/fitbitApiAuthExample.jsp").forward(request, response);
				} catch (FitbitAPIException e) {
					e.printStackTrace();
					throw new ServletException("Exception during getting user info", e);
				}
			} else {
				try {
					String url = client.getResourceOwnerAuthorizationURL(new LocalUserDetail("227F9J"), exampleBaseUrl
							+ "/fitbitApiAuthExample?completeAuthorization=&oauth_nonce=227F9J");
					System.out.println("URL : " + url);
					response.sendRedirect(url);
				} catch (FitbitAPIException e) {
					throw new ServletException("Exception during performing authorization", e);
				}
			}

		} catch (Exception e) {
			System.out.println("ZUH OH: " + e.getMessage());
		}
	}
}
